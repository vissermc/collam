/*

+ Meta-reasoning: Quite often it is not the argument that needs to rebutted, but the reasoning instead, i.e. the link between an argument and conclusion. Argument number 14 is an example of a such a meta-counter-argument.
+ Compound arguments: Arguments link to different aspects of a conclusion, but sometimes some argument together link to one aspect. Such a composition is either a logical 'or' or a logical 'and'. Item No 2 is an example of an 'and'-composition. 
+ Calculated probabilities. Probabilities of conclusions being correct are calculated, where the rule is that the probability is only 1 (i.e. correct), when all supporting arguments are correct/proven, and all counter-arguments are incorrect/unproven. One totally incorrect supporting argument or one correct counter-arguments already make the conclusion incorrect (probability 0).
+ Coloring: Colors of propositions (i.e. arguments or conclusions) are ranged between bright blue (completely proven or true) and grey (completely unproven or false). A supporting connection is between bright green and grey, while a challenging connection is between red and grey, depending on the strength of the connection.

https://collam.googlecode.com/svn/trunk/
|+-->prop
||
||<-+
||  |
||  metaProp
||<-+
||  |
||  metaProp2
||
conclusion
^^
||<-+
||  |<-+
||  |  |
||  |  metaMetaProp
||  metaProp
||<-+
||  |
||  metaProp2
||because
|+--prop  
|but
+--or
   ||
   |+-
   |
   +-

*/


// conclusion<-arguments, conclusion<-argument

curTracker; // ==() for latest state.

[Filter={isTracked,...}];
[Conclusion={[Filter=>]filters}];
[Change={who,when,isPrivateEdit}];
[TrackedObjectState={isDeleted,[Change]change,data}];
[TrackedObjectStates=Conclusion=>TrackedObjectState];
[TrackedObject={[{new,destroy,getText,unuse,calcProbability,getColor,getConclusions,hasArrowPoint}]class,id,[TrackedObjectStates]states,[Item=>Connection]arguments}];
[Connection=TrackedObject+{ [Item]argument, [TrackedObject]conclusion}];
[Item=TrackedObject+{[TrackedObject=>Connection]conclusions}];
[Item.class=TrackedObject.class+{type,getTagText,serialize}];
[ConnData={probability}];
[PropData={text,probability}];
[Project={[=>Conclusion]conclusions,[=>Item]items,nextID}];
[=>Project]projects;
[TrackedObjectState]indexStates=?<[TrackedObject]o>(&o.states[{:curTracker}@o?curTracker]);
publishState=?<[TrackedObjectStates]>
(	$[()]=$[curTracker];
	$.change.isPrivateEdit=0;
);

tryDestroy=?<[TrackedObject]o>
(	
	!sum(o.states%!$.data.isDeleted) ?
		o->destroy();
);
tryDestroyItem=?
(	//todo
);
&[Connection.class]connectionClass.!
(
	*$={};
	$.new=?<argument,conclusion> (&{&connectionClass,getNewId!,{:()=>{0,(),0}}, {:}, argument,conclusion});
	$.destroy=?<><[Connection]this>
	(	
		this.argument->unuse(this.conclusion);
		this.conclusion.arguments:-=this.argument;
		this.metaArgs:!($.conclusions:-=this;);
	);
	$.hasArrowPoint=1;
	$.getConclusions = ? <><[Connection]this> {:this.conclusion};
	$.unuse=$.destroy;
	$.calcProbability=?<><[Connection]this>
	(
		.p=getConnData(this).probability;
		.m=p;
		//putline(.?{$.data->calcProbability()}); putline(.?{this.argument->getText(),this.conclusion->getText()});
		this.arguments%!(m*=$.data->calcProbability(););
		(p<0?1.0:0.0)+(m*this.argument->calcProbability())
	);
	$.getColor=?<><[Connection]this>
	(
		.p=getConnData(this).probability;
		.cp=this->calcProbability();
		getCSSColor(p<0?1.0-cp:cp,p<0?{1,0,0}:{0,1,0})
	);
	$.getText=?<><[Connection]this>
	(
		.p=getConnData(this).probability;
		this->hasArrowPoint?(p>=0?'supports'+(p==1.0?'':' '+p):'challenges'+(p==-1.0?'':' '+-p)):(p==1.0?() :''(p))
	);
);
acceptItemChange=?<[Item]i>
(
	i.states[curTracker]=i.states[()];
	tryDestroyItem(i);
);
acceptConnectionChange=?<[Connection]c>
(
	c.states[curTracker]=c.states[()];
	tryDestroyConnection(c);
);

serializeObjectStates=?<[TrackedObjectStates]>
(	$%!{$.key.id,$.data.!{$.isDeleted,$.change.!{$.who.id,$.when,$.isPrivateEdit},$.data}}
);
serializeConclusion=?<[Conclusion]> ($);

isObjectValid=?<[TrackedObject]o>(indexStates(o).isDeleted==0);
getData=?<[TrackedObject]o> (	&indexStates(o).data );
[ConnData]getConnData=getData;
[PropData]getPropData=getData;
getChangeData=?{curTracker,dateTime!,1};
prepareEdit=?<[TrackedObject]o>
(	{:curTracker}@o.states ?:
	(	o.states[curTracker]=o.states[()];
	);
	o.states[curTracker].change=getChangeData();
);
[Connection=>]getValidArgConnections=?<[TrackedObject]object>
(	.r={:}; object.arguments %! (isObjectValid($.data) ? (r:+=$.data;);); r
);
[Item=>Connection]getValidArgs=?<[TrackedObject]object>
(	.r={:}; object.arguments %! (isObjectValid($.key) ? (r[$.key]=$.data;);); r
);
[Item=>Connection]getValidConnArgs=?<[TrackedObject]object>
(	.r={:}; object.arguments %! (isObjectValid($.data) ? (r+=getValidArgs($.data););); r
);
[TrackedObject=>Connection]getValidConclusions=?<[TrackedObject]object>
(	.r={:}; object->getConclusions() %! (isObjectValid($.key) ? (r[$.key]=$.data;);); r
);
tryDestroyConnection =?
( //todo
);
&[Item.class]itemClass.!
(
	*$={};
	$.new = ?<class,data> registerItem(&{class,0,{:()=>{0,(),data}},{:},{:}});
	$.serialize=? <className><[Item]this>
	(
		{	className,
			serializeObjectStates(this.states),
			this.id,
			this.arguments%!{$.key.id,serializeConnection($.data)} //serializeObjectStates
		}
	);
	$.getConclusions = ? <><[Item]this>
	(
		this.conclusions
	);
	$.calcProbability = ? <><[Item]this>
	(	.m=1.0;
		getValidArgConnections(this):!(m*=$->calcProbability(););
		m
	);
	$.unuse=?<[TrackedObject]conclusion><[Connection]this>(this.conclusions:-=conclusion;);
	$.destroy= ? <><[Item]this>
	(
		this.conclusions:!($.arguments:-=this;); // force deletion of connections!
		this.arguments:!($.conclusions:-=this;); // force deletion of connections!
	);
	$.getColor =? <><[Item]this>
	(	.p;
		getCSSColor(p=this->calcProbability(),p<0?{1,0,0}:{0,1,0})
	);
	$.hasArrowPoint = 0;
	$.getTagText=?<prop><[Item]this>
	(	''{'&#x2116;&nbsp;',this.id,prop!=1.0?{'&nbsp;&nbsp;P&nbsp;',prop}}
	);
);

&[Item.class]orClass.!
(
	*$=itemClass;
	$.new = ?itemClass.new(&orClass,());
	$.calcProbability = ? <><[Item]this>
	(	.m=1.0;
		getValidArgConnections(this):!(m*=1.0-$->calcProbability(););
		1.0-m
	);
	$.type = 'or';
	$.getText = ? 'or';
);

&[Item.class]andClass.!
(
	*$=itemClass;
	$.new = ?itemClass.new(&andClass,());
	$.type = 'and';
	$.getText = ? 'and';
);

connectItems=?<[Item]argument,[TrackedObject]conclusion, strength>
(
	putline('Connecting '+argument.id+'->'+conclusion.id);
	.hasLoop=findItemInArguments(argument,gatherConclusions(conclusion,1,1),1,1);
	!hasLoop ?
	(	[Connection].c;
		{:conclusion}@argument.conclusions?
		(	c=argument.conclusions[conclusion];
		):
		(	c=connectionClass.new(argument,conclusion);
			argument.conclusions[conclusion]=c;
			conclusion.arguments[argument]=c;
		);
		c.states[curTracker]={0,getChangeData(),{0.0(strength)}};
		//todo: this should not happen, why was it in the code? {:argument}@conclusion.arguments?:(conclusion.arguments[argument]=c;);
	);
);

disconnectItems=?<[Item]argument,[Item]conclusion>
(
	putline('Disconnecting '+argument.id+'->'+conclusion.id);
	[Connection].c=argument.conclusions[conclusion];
	@c.states==1 ?
	(
		argument.conclusions:-=conclusion;
		conclusion.conclusione:-=argument;
	):
	(
		prepareEdit(c);
		indexStates(c).isDeleted=1;
		//conclusion.arguments[argument][curTracker]={1,getChangeData()};
		/*!sum(conclusion.arguments[argument]%! !$.data.isDeleted ) ?
		(	conclusion.arguments:-=argument;
			argument.conclusions:-=conclusion;
		);*/
	);
);

disconnectArgs=?<[Item]item>
(
	getValidArgs(item):!disconnectItems($,item);
);
disconnectConclusions=?<[Item]item>
(
	getValidConclusions(item):!disconnectItems(item,$);
);

nextID;
getNewId=? (.n=nextID; nextID+=1; n);
registerItem=?<[Item]item> ( item.id=getNewId!; items+={:item.id=>item};item);

removeItem=?<[Item]item>
(
	disconnectArgs(items);
	disconnectConclusions(items);
	indexStates(item).isDeleted=1; 
	tryDestroyItem();
);

&[Item.class]propositionClass.!
(
	*$=itemClass;
	$.new = ? <text> itemClass.new(&propositionClass,{text,1.0});
	$.calcProbability = ? <><[Item]this>
	(	getPropData(this).probability * (this.!itemClass.calcProbability())
	);
	$.getText = ? <><[Item]this>
	(	getPropData(this).text
	);
	$.getTagText=?<prop><[Item]this>
	(	.p=getPropData(this).probability;
		(this.!itemClass.getTagText(prop))+(p!=1.0 ? '&nbsp;('+p+')')
	);
	$.getColor =? <><[Item]this>
	(
		getCSSColor(this->calcProbability(),{0,1,1})
	);
	$.hasArrowPoint = 1;
	$.type = 'prop';
	$.serialize=? <><[Item]this>
	(
		(this.!itemClass.serialize())+{getPropData(this).text,getPropData(this).probability}
	);
);
unserialize=?
(	eval(format('[<>Class]$',{$[0]}))!.unserialize()
);
iterateConclusions=? <func, includeSelf,includeMeta><[TrackedObject]this>
(	!includeSelf || func(this) ? (
		.continue=1;
		getValidConclusions(this):!
		(	includeMeta || $.class!=connectionClass ?
			(	
				continue&&=iterateConclusions(func,1,includeMeta);
			);
		);
		continue
	)
);
iterateArgs=? <func, includeSelf, includeMeta><[Item]this>
(	!includeSelf || func(this) ? (
		.continue=1;
		getValidArgs(this):!
		( continue&&=iterateArgs(func,1,includeMeta);
		);
		includeMeta?(
			getValidConnArgs(this):!
			( continue&&=iterateArgs(func,1,includeMeta);
			);
		);
		continue
	)
);

findItemInArguments=?<[Item]root, [Item=>]findOneOfUs,includeSelf,includeMeta>
(
	.f= ? !($@findOneOfUs);
	!(root.!iterateArgs(f,includeSelf,includeMeta))
);
/*
findObjectInConclusions=?<[Item]root, [TrackedObject=>]findOneOfUs,includeSelf>
(
	.f= ? !($@findOneOfUs);
	!(root.!iterateConclusions(f,includeSelf))
);*/

gatherConclusions=?<[TrackedObject]root,includeSelf,includeMeta>
(
	s={:};
	.f= ? (s:+=$;1);
	root.!iterateConclusions(f,includeSelf,includeMeta);
	s
);

// ixUrlTail=0;ixType=1;ixText=2;ixProp=3;ixColor=4;ixArrowMode=5;ixArrowColor=6;ixLineUrlTail=7;ixLineText=8;ixMetaChildren=9;ixChildren=10;

getItemJSONProps=?<[Item]i>
(	{: 'type'=>i->type, 'box'=>{:'urlTail'=>format('&type=<>&item=$<>',{i->type, i.id}),'text'=>i->getText(),'probBox'=>i->getTagText(i->calcProbability()),'color'=>i->getColor()}}
);

urlTailForConnection=?<[TrackedObject]argument, [TrackedObject]conclusion> (format('&type=connection&item=$<>&item2=$<>',{argument.id, conclusion.id}));

getJSONItemConclusionTree=?<[Item]item,level>
(
	level ? ( 
		//.c=item->getColor();
		{:}(item.conclusions %!
		(
			$.key.class!=connectionClass?
			{
				[Item]($.key).id,
				getItemJSONProps($.key)+
				{:	
					'arrow'=>
					{:
						'mode'=>($.key->hasArrowPoint*2)/*|(@$.key.arguments>1?4)|(level==1&&$.key.conclusions?8)*/,
						'color'=>$.data->getColor(),
						'urlTail'=>urlTailForConnection(item,$.key), 
						'text'=>$.data->getText()
					},
					'metaChildren'=>getJSONArgumentTree($.data,level-1), 
					'children'=>getJSONItemConclusionTree($.key,level-1)
				}
			}
		))%!$.data
	)
);

getJSONArgumentTree=?<[TrackedObject]object,level>
(
	level ? 
	(	
		{:}(getValidArgs(object)%!
		{	$.key.id,
			getItemJSONProps($.key)+
			{: 
				'arrow'=>
				{:
					'mode'=>(object->hasArrowPoint|1)/* | (@$.key.conclusions>1?4)|(level==1&&getValidArgs($.key)?16)*/, 
					'color'=>$.data->getColor(),
					'urlTail'=>urlTailForConnection($.key,object), 
					'text'=>$.data->getText(),
				},
				'metaChildren'=>getJSONArgumentTree($.data,level-1),
				'children'=>getJSONArgumentTree($.key,level-1)
			}
		}
		)%!$.data
	)
);

getJSONTriple=?<[Item]center,level>
(
	.l=getItemJSONProps(center)['box'];
	getJSONItemConclusionTree(center,level-1),
	l,//+{(level==1&&getValidConclusions(center)?8)|(level==1&&getValidArgs(center)?16)},
	getJSONArgumentTree(center,level-1)
);

appendInDepth=?<struct,depth,item>
(
	.s=struct;
	ctup(depth):!
	(	s=&s[-1][-1];
	);
	s+={{item,{}}};
);

processStruct=?<struct,[Item]parent>
(
	.elems=struct[0].!fetch(`^(<??)([+\-]??)({[01]\.??[0-9]**}??) **({\[[01]\.??[0-9]**\]}??) **(.++)`)[0];
	putline(.?elems);
	[Item].item=`^or$`i@elems[4]?orClass.new():(`^and$`i@elems[4]? andClass.new() : propositionClass.new(elems[4]) ) ;
	elems[3]!=''?(getPropData(item).probability=0.0(elems[3]<<1););
	.strength=(elems[1]=='-'?-1.0:1.0) * (elems[2]=='' ? 1.0: 0.0(elems[2]));
	elems[0]=='<'?
	(	connectItems(item,parent.conclusions[parent.conclusions[:0]],strength);
	) :
	(
		parent!=null?(connectItems(item,parent,strength););
	);
	struct[1]:!processStruct($,item);
	item
);

[Item]parseTree=?<text>
(
	.struct={};
	.lines=linesplit(text)-{''};
	lines:!<line>
	(
		.tabs=@(line.!fetch(`^(\t**)`)[0][0]);
		line<<=tabs;
		appendInDepth(&struct,tabs,line);
	);
	processStruct(struct[0],null)
);

collam_init=?
(
	putline('Initializing Collam...');
	nextID=1;
	items={:};
	currentItem=parseTree(load(projectPath+'exampleTree.txt')).arguments[:0];
	/*.p1=propositionClass.new('final conclusion');
	.p2=propositionClass.new('center conclusion');
	.p3=propositionClass.new('arg 1');
	[Item].p4=propositionClass.new('arg 2');
	[Item].p5=propositionClass.new('arg 3');
	.p6=orClass.new();
	[Item].p7=propositionClass.new('arg 4');
	.p8=propositionClass.new('arg 5');
	getPropData(p4).probability=0.2;
	connectItems(p2,p1,1);
	connectItems(p3,p6,1);
	connectItems(p5,p6,1);
	connectItems(p6,p2,1);
	connectItems(p4,p2,-1);
	connectItems(p7,p5.conclusions[p6],-1);
	connectItems(p8,p7.conclusions[p5.conclusions[p6]],1);
	currentItem=p2;*/
);

(
	.item;
	.val;
	.generateItemQuestion=?<action>( ?(val==()?{'Enter ID of reason.',''}:action(items[0(val)])) );
	act=?<type,index,pItem,pItem2,pVal>
	(	
		[Item]item=items[pItem];
		val = pVal;
		//putline(.?{type,index,pItem,val,hash(&val),hash(&item)});
		.r=menus[type][index].func!;
		r
	);
	[=>:{text,flags,func}]menus=
	{:
		'prop'=>
		{
			{'position as root',0,?(currentItem=item;)},
			{'set internal probability',0,?(val==()?{'Change internal probability between 0 and 1.0.',getPropData(item).probability}:(prepareEdit(item);getPropData(item).probability=0.0(val);))},
			{'edit text',0,?(val==()?{'Change text of proposition.',item.text}:(prepareEdit(item);getPropData(item).text=val;))},
			{'is argument in ...',0,generateItemQuestion(?connectItems(item,$))},
			{'is argument in new support',0,?(connectItems(item,reasonClass.new(1)); )},
			{'is argument in new challenge ',0,?(connectItems(item,reasonClass.new(0)); )},
			{'add existing reason ...',0,generateItemQuestion(?connectItems($,item))},
			{'add new support',0,?(connectItems(reasonClass.new(1),item); )},
			{'add new challenge',0,?(connectItems(reasonClass.new(1),item); )},
			{'delete',0,deleteFunc=?(prepareEdit(item);removeItem(item);) }
		},
		'reason'=>
		{
			{'position as root',0,?(currentItem=item;)},
			{'attach to ...',0,generateItemQuestion(?(disconnectConclusions(item);connectItems(item,$)))},
			{'attach to new conclusion',0,attachNewConclusionFunc=?(val==()?{'Enter text of new proposition.',''}:(disconnectConclusions(item);connectItems(item,propositionClass.new(val))))},
			{'insert new argument',0,?(val==()?{'Enter text of new proposition.',''}:(connectItems(propositionClass.new(val),item)))},
			{'insert or-operator',0,?connectItems(orClass.new(),item)},
			{'insert not-operator',0,?connectItems(notClass.new(),item)},
			{'insert existing ...',0,generateItemQuestion(?connectItems(item,$))},
			{'delete',0,deleteFunc },
			{'invert support vs. challenge',0,?(prepareEdit(item);&getReasonData(item).isSupportive.!(*$=!$;);)},
			{'meta-reasoning',1},
			{'attach to new support',0,?(disconnectConclusions(item);connectItems(item,reasonClass.new(0)))},
			{'attach to new challenge',0,?(disconnectConclusions(item);connectItems(item,reasonClass.new(1)))},
			{'insert new support',0,?connectItems(reasonClass.new(1),item)},
			{'insert new challenge',0,?connectItems(reasonClass.new(1),item)},
		},
		'or'=>
		{
			{'attach to ...',0,generateItemQuestion(?(disconnectConclusions(item);connectItems(item,$)))},
			{'attach to new conclusion',0,attachNewConclusionFunc},
			{'insert new proposition',0,?(val==()?{'Enter text of new proposition.',''}:(connectItems(propositionClass.new(val),item)))},
			{'insert not-operator',0,?connectItems(notClass.new(),item)},
			{'insert and-operator',0,?connectItems(andClass.new(),item)},
			{'insert existing ...',0,generateItemQuestion(?connectItems(item,$))},
			{'delete',0,deleteFunc }
		},
		'and'=>
		{
			{'attach to ...',0,generateItemQuestion(?(disconnectConclusions(item);connectItems(item,$)))},
			{'attach to new conclusion',0,attachNewConclusionFunc},
			{'insert new proposition',0,?(val==()?{'Enter text of new proposition.',''}:(connectItems(propositionClass.new(val),item)))},
			{'insert not-operator',0,?connectItems(notClass.new(),item)},
			{'insert or-operator',0,?connectItems(orClass.new(),item)},
			{'insert existing ...',generateItemQuestion(?connectItems(item,$))},
			{'delete',0,deleteFunc }
		},
		'not'=>
		{
			{'attach to ...',0,generateItemQuestion(?(disconnectConclusions(item);connectItems(item,$)))},
			{'attach to new conclusion',0,attachNewConclusionFunc},
			{'insert new proposition',0,?(val==()?{'Enter text of new proposition.',''}:(connectItems(propositionClass.new(val),item)))},
			{'insert or-operator',0,?connectItems(orClass.new(),item)},
			{'insert and-operator',0,?connectItems(andClass.new(),item)},
			{'insert existing ...',generateItemQuestion(?connectItems(item,$))},
			{'delete',0,deleteFunc }
		},
		'connection'=>
		{	{'delete',0,?() }
		}
	};
);

/*
OR-operator: a+b-a*b
go to
edit
probability... (-> [0.3] in text)
add:
	because ...
	but ...
	... because
	... but
	comment
attach to ...
take ...
delete
== reason menu
invert but/because
attach to ... [this will remove current attachment
take ... (both propositions and reasons)
add:
	new proposition
	existing...
	... because
	... but
	because ...
	but ...
	comment
delete

Lemma (logic), which is simultaneously a premise for a contention above it and a contention for premises below it
Lemma (mathematics), a proven statement used as a stepping-stone toward the proof of another statement
A final conclusion is a proposition, which is reached after considering the evidence, arguments or premises

A final conclusion is a proposition, which is reached after considering the evidence, arguments or premises. Their presence is common in academic or research work. Scientific Research

proposition->{premise,concluson}

In research and experimentation, conclusions are determinations 
made by studying the results of previous work and practice is the
 science that studies the rules and procedures to distinguish correct reasoning (valid) or incorrect (invalid). 
 The arguments (syllogisms) are movements of thought by which to extract something familiar from something known. 
 The arguments consist of propositions (or Juci). The propositions that serve as departure (the known) are called premises, 
 and the proposition that derives from these premises is called conclusion. The arguments can be inductive or deductive. 
 The traditional logic (Aristotelian) mostly devoted to the analysis of deduction and fallacies (invalid and misleading arguments,
 see Richard Ortiz Ortiz, Logic, Quito: Publiconti 1994). Music
*/